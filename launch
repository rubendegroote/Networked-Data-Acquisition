from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from multiprocessing import freeze_support

translation = {}
try:
    from backend.fileserver import FileServer
    translation['file_server'] = FileServer
except:
    print('Problem importing {} - this should not affect anything'.format('file_server'))
try:
    from backend.dataserver import DataServer
    translation['data_server'] = DataServer
except:
    print('Problem importing {} - this should not affect anything'.format('data_server'))
try:
    from backend.controller import Controller
    translation['controller'] = Controller
except:
    print('Problem importing {} - this should not affect anything'.format('controller'))
try:
    from backend.device import Device
    translation['device'] = Device
except:
    print('Problem importing {} - this should not affect anything'.format('device'))
import traceback


class Launcher(QtWidgets.QWidget):
    def __init__(self,name="",device_name = None):
        super(Launcher,self).__init__()

        self.setGeometry(100,400,250,25)

        try:
            if device_name is None:
                self.program = translation[name]()
                self.setWindowTitle(name)
            else:
                self.program = translation[name](device_name)
                self.setWindowTitle(name + ' ' + str(device_name))
            style = "QLabel { background-color: green }"
            e=''

        except KeyError as error:
            self.program = None
            e = str(traceback.format_exc())
            style = "QLabel { background-color: red }"
            
            print("Invalid option supplied to launch")
            print("Usage: python launch <name> (<device_name>)")
            print("Possible values of <name>:")
            print("\t file_server")
            print("\t data_server")
            print("\t controller")
            print("\t device")
            print("In case of device, Possible values of <device_name>:")
            print("\t m2")
            print("\t wavemeter")
            print("\t wavemeter_pdl")
            print("\t cris")
            print("\t diodes")
            print("\t abu")
            print("\t matisse")
            print("\t beamline")
            print("\t iscool")
            print("\t fpi")
            print("\t current")
            print("\t temperature")
            print("\t proton")
            print("\t dss")

        except:
            self.program = None
            e = str(traceback.format_exc())
            style = "QLabel { background-color: red }"
    
        layout = QtWidgets.QGridLayout(self)
        label = QtWidgets.QLabel(e)
        label.setStyleSheet(style)
        layout.addWidget(label)
        self.show()

    def closeEvent(self,event):
        if not self.program is None:
            self.program.stop()

def main():
    freeze_support()
    app = QtWidgets.QApplication(sys.argv)
    name = sys.argv[1]
    if name == 'device':
        device_name = sys.argv[2]
    else:
        device_name = None

    launcher = Launcher(name,device_name)


    sys.exit(app.exec_())

if __name__ == '__main__':
	main()

