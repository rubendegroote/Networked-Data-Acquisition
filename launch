from PyQt4 import QtCore,QtGui
import sys
from multiprocessing import freeze_support

from backend.FileServer import FileServer
from backend.DataServer import DataServer
from backend.Controller import Controller
from backend.Device import Device
import traceback

translation = {}
translation['file_server'] = FileServer
translation['data_server'] = DataServer
translation['controller'] = Controller
translation['device'] = Device

class Launcher(QtGui.QWidget):
    def __init__(self,name="",device_name = None):
        super(Launcher,self).__init__()

        try:
            if device_name is None:
                self.program = translation[name]()
                self.setWindowTitle(name)
            else:
                self.program = translation[name](device_name)
                self.setWindowTitle(name + ' ' + str(device_name))
            style = "QLabel { background-color: green }"
            e=''
        except:
            self.program = None
            e = str(traceback.format_exc())
            style = "QLabel { background-color: red }"
    
        layout = QtGui.QGridLayout(self)
        label = QtGui.QLabel(e)
        label.setStyleSheet(style)
        layout.addWidget(label)
        self.show()

    def closeEvent(self,event):
        if not self.program is None:
            self.program.stop()

def main():
    freeze_support()
    try:
        name = sys.argv[1]
        if name == 'device':
            device_name = sys.argv[2]
        else:
            device_name = None

    except KeyError as e:
        print("Invalid option supplied to launch")
        print("Usage: python launch <name> (<device_name>)")
        print("Possible values of <name>:")
        print("\t file_server")
        print("\t data_server")
        print("\t controller")
        print("\t device")
        print("In case of device, Possible values of <device_name>:")
        print("\t M2")
        print("\t wavemeter")
        print("\t wavemeter_pdl")
        print("\t CRIS")
        print("\t diodes")
        print("\t ABU")
        print("\t Matisse")
        print("\t Beamline")
        print("\t iscool")
        print("\t FPI")

        return

    app = QtGui.QApplication(sys.argv)
    launcher = Launcher(name,device_name)
    sys.exit(app.exec_())

if __name__ == '__main__':
	main()

